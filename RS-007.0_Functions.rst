Functions & Generics
########################

You can define your function before or after ``main``

Let's create a few function

1. Start a new project 
#. Type the following code in main.rs
   
   .. code-block:: Rust
      :caption: main.rs

      // ----- FUNCTIONS -----
      // You can define functions before or after main
      // function definition
      fn say_hello(){
          println!("Hello");
      }

      // You can pass arguments to functions
      fn get_sum(x: i32, y: i32){
          println!("{} + {} = {}", x, y, x+y);
      }

      // Return a value
      fn get_sum_2(x: i32, y: i32) -> i32 {
          // This expression is returned
          // If you used a semicolon you'd get an error because
          // a statement don't evaluate to a value
          x + y
      }

      // You can also use return
      fn get_sum_3(x: i32, y: i32) -> i32 {
          return x + y;
      }

      // Return multiple values
      fn get_2(x: i32) -> (i32, i32){
          return (x+1, x+2);
      }

      // This function sums values in a list (Receives reference to list)
      fn sum_list(list: &[i32]) -> i32 {
          let mut sum = 0;
          for &val in list.iter(){
              sum += &val;
          }
          sum
      }

      fn main() {
          // ----- FUNCTIONS calls -----
          say_hello();
          println!("--function performing simple addition--");
          get_sum(4, 5);
          println!("{} + {} = {}", 5, 3, get_sum_2(5, 3));
          println!("{} + {} = {}", 7, 8, get_sum_3(7, 8));

          // Get multiple values
          let (val_1, val_2) = get_2(3);
          println!("get_2: Function returns tuple; f(x)= (x+1, x+2), where x=3 ({}, {})", val_1, val_2);

          let num_list = vec![1,2,3,4,5];
          println!("Given a list [1,2,3,4,5] \nSum of list = {}", sum_list(&num_list));
      }

#. Run the code 
   
   .. code-block:: console 
      :caption: rust 

      Examples/tut-007_functions-generics (main)
      $ cargo run
         Compiling tut-007_functions-generics v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-007_functions-generics)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.63s
           Running `target\debug\tut-007_functions-generics.exe`
      Hello
      --function performing simple addition--
      4 + 5 = 9
      5 + 3 = 8
      7 + 8 = 15
      get_2: Function returns tuple; f(x)= (x+1, x+2), where x=3 (4, 5)
      Given a list [1,2,3,4,5]
      Sum of list = 15
      

**Function** definition

* start with ``fn``
* functions can take 1 or more parameters or none. 
  
  * The type of the parameters must be known at compile time thus 
    they must be explicitly stated.

* function can return data and we can tell the 
  data type the function return. 
  
  * ``->``, as in ``-> i32``,  the arrow symbol is used to indicate the return type of 
    that function

* The function body is a block of statements details what the function does. 

  * you can explicitly use the ``return`` keyword in the function body to tell what 
    expression to return or you can omit that in which case the expression will 
    not end with a semi-colon.
  
  * you can also return multiple different values via tuple: ``get_2`` function

* we can pass a number list and have the element of that list sum:
  ``fn sum_list(list: &[i32]) -> i32``

  * using an iterator we can sum it up.


**Generics** 

* We can specify the data type to be used at a later time with generics
* Generics are mainly used when we want to create functions that can work with 
  multiple different types of data.

* they can be used with 
  
  * struct, enum, traits, etc..


1. Create a function that will add 2 values of unspecified data type.
   ``get_sum_gen``, the generic for of get sum.

2. Suppose we add the following code 
   
   .. code-block:: diff 
      :caption: main.rs 

      --- a/_resources/Examples/tut-007_functions-generics/src/main.rs
      +++ b/_resources/Examples/tut-007_functions-generics/src/main.rs
      @@ -37,6 +37,11 @@ fn sum_list(list: &[i32]) -> i32 {
           sum
       }

      +// We get 2 generic types of the same type and return that same type
      +fn get_sum_gen<T>(x: T, y: T) -> T {
      +    return x + y;
      +}
      +
       fn main() {
           // ----- FUNCTIONS calls -----
           say_hello();
      @@ -51,4 +56,12 @@ fn main() {

           let num_list = vec![1,2,3,4,5];
           println!("Given a list [1,2,3,4,5] \nSum of list = {}", sum_list(&num_list));
      +
      +    // ----- GENERIC TYPES -----
      +    // We can specify the data type to be used at a later time with generics
      +    // It is mainly used when we want to create functions that can work with
      +    // multiple data types. It is used with structs, enums, traits, etc.
      +    // which we'll talk about later
      +    println!("5 + 4 = {}", get_sum_gen(5,4));
      +    println!("5.2 + 4.6 = {}", get_sum_gen(5.2,4.6));
       }
   
   .. note:: the generic type is ``T`` in that case but it can be any letter of 
      your chosen.

#. Commit the change and run the code 

   .. code-block:: Rust 
      :caption: bad code

      fn get_sum_gen<T>(x: T, y: T) -> T {
          return x + y;
      }

   
   * In Rust, we cannot define generic that way.
   * We end up with this error if we run 
     
     .. code-block:: console 
        
        $ cargo run
            Compiling tut-007_functions-generics v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-007_functions-generics)
         error[E0369]: cannot add `T` to `T`
           --> src\main.rs:42:14
            |
         42 |     return x + y;
            |            - ^ - T
            |            |
            |            T
            |
         help: consider restricting type parameter `T` with trait `Add`
            |
         41 | fn get_sum_gen<T: std::ops::Add<Output = T>>(x: T, y: T) -> T {
            |                 +++++++++++++++++++++++++++

         For more information about this error, try `rustc --explain E0369`.
         error: could not compile `tut-007_functions-generics` (bin "tut-007_functions-generics") due to 1 previous error
    
    * You cannot use the addition operator ``+`` on generics in the form that we 
      are working with. We will need a **Add** trait. Traits will be covered later.

      * The add trait specifies the functionality of the addition operator for 
        different data types. we need to import ``std::ops::Add;`` for that trait.
        
        * this will allow us to perform addition with our generics.

#. Let's correct the code. 
   
   .. code-block:: diff 

      --- a/_resources/Examples/tut-007_functions-generics/src/main.rs
      +++ b/_resources/Examples/tut-007_functions-generics/src/main.rs
      @@ -1,3 +1,5 @@
      +use std::ops::Add;
      +
       // ----- FUNCTIONS -----
       // You can define functions before or after main
       // function definition
      @@ -38,7 +40,7 @@ fn sum_list(list: &[i32]) -> i32 {
       }

       // We get 2 generic types of the same type and return that same type
      -fn get_sum_gen<T>(x: T, y: T) -> T {
      +fn get_sum_gen<T:Add<Output = T>>(x: T, y: T) -> T {
           return x + y;
       }

      @@ -62,6 +64,7 @@ fn main() {
           // It is mainly used when we want to create functions that can work with
           // multiple data types. It is used with structs, enums, traits, etc.
           // which we'll talk about later
      +    println!("--Using Generics--");
           println!("5 + 4 = {}", get_sum_gen(5,4));
           println!("5.2 + 4.6 = {}", get_sum_gen(5.2,4.6));
       }

#. Commit and Run the code 
   
   .. code-block:: console 

      $ cargo run
         Compiling tut-007_functions-generics v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-007_functions-generics)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.74s
           Running `target\debug\tut-007_functions-generics.exe`
      Hello
      --function performing simple addition--
      4 + 5 = 9
      5 + 3 = 8
      7 + 8 = 15
      get_2: Function returns tuple; f(x)= (x+1, x+2), where x=3 (4, 5)
      Given a list [1,2,3,4,5]
      Sum of list = 15
      --Using Generics--
      5 + 4 = 9
      5.2 + 4.6 = 9.8
      
