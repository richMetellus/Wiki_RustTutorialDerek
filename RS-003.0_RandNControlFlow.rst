Random Number Generator and Control Flow 
##########################################



Random Number Generator
*************************

1. Create a new project with ``cargo new <path-as-proj-name>``
2. Modify the project with the changes 
   
   .. code-block:: diff 
      :caption: src/main.rs

      diff --git a/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs b/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      index e7a11a9..1cd5b20 100644
      --- a/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      +++ b/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      @@ -1,3 +1,7 @@
      +use rand::Rng;
      +
       fn main() {
      -    println!("Hello, world!");
      +    // generate a random int between 1 and 100 (inclusive)
      +    let random_num = rand::thread_rng().gen_range(1..101);
      +    println!("Random num: {}", random_num);
       }
   
   .. code-block:: diff 
      :caption: Cargo.toml 

      diff --git a/_resources/Examples/tut-003_Rand-and-flowctrl/Cargo.toml b/_resources/Examples/tut-003_Rand-and-flowctrl/Cargo.toml
      index faa9a02..3cd2c38 100644
      --- a/_resources/Examples/tut-003_Rand-and-flowctrl/Cargo.toml
      +++ b/_resources/Examples/tut-003_Rand-and-flowctrl/Cargo.toml
      @@ -4,3 +4,4 @@ version = "0.1.0"
       edition = "2024"

       [dependencies]
      +rand = "0.9.1"
      \ No newline at end of file

#. Build the code 
   
   .. code-block:: console 

      Examples\tut-003_Rand-and-flowctrl)
      warning: use of deprecated function `rand::thread_rng`: Renamed to `rng`
       --> src\main.rs:5:28
        |
      5 |     let random_num = rand::thread_rng().gen_range(1..101);
        |                            ^^^^^^^^^^
        |
        = note: `#[warn(deprecated)]` on by default

      warning: use of deprecated method `rand::Rng::gen_range`: Renamed to `random_range`
       --> src\main.rs:5:41
        |
      5 |     let random_num = rand::thread_rng().gen_range(1..101);
        |                                         ^^^^^^^^^

      warning: `tut-003_Rand-and-flowctrl` (bin "tut-003_Rand-and-flowctrl") generated 2 warnings
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 2.92s
           Running `target\debug\tut-003_Rand-and-flowctrl.exe`
      Random num: 100
       *  Terminal will be reused by tasks, press any key to close it. 

#. Commit the changes to create a snapshot of this code Examples
#. Modify the code to reflect the new way of generating a random number 
   
   .. code-block:: diff 
      :caption: src/main.rs 

      --- a/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      +++ b/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      @@ -2,6 +2,6 @@ use rand::Rng;

       fn main() {
           // generate a random int between 1 and 100 (inclusive)
      -    let random_num = rand::thread_rng().gen_range(1..101);
      +    let random_num = rand::rng().random_range(1..101);
           println!("Random num: {}", random_num);
       }

#. Run the code and capture the result 
   
   .. code-block:: console 

       *  Executing task: C:\Users\ricky\.cargo\bin\cargo.EXE run --package tut-003_Rand-and-flowctrl --bin tut-003_Rand-and-flowctrl 

         Compiling tut-003_Rand-and-flowctrl v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-003_Rand-and-flowctrl)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.79s
           Running `target\debug\tut-003_Rand-and-flowctrl.exe`
      Random num: 45
       *  Terminal will be reused by tasks, press any key to close it. 

#. Commit the change.


If/else if/ else in Rust 
**************************

1. Let modify our source code to be like the following 
   
   .. code-block:: diff 

      index 84dfb76..7a887f8 100644
      --- a/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      +++ b/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      @@ -2,6 +2,18 @@ use rand::Rng;

       fn main() {
           // generate a random int between 1 and 100 (inclusive)
      -    let random_num = rand::rng().random_range(1..101);
      -    println!("Random num: {}", random_num);
      +    let age = rand::rng().random_range(1..101);
      +    println!("Random age: {}", age);
      +    println!("-------------------------------------------------------------------");
      +
      +    if (age >= 1) && (age <= 18){
      +        println!("Important Birthday");
      +    } else if (age == 21) || (age == 50){
      +        println!("{} is Important Birthday", age);
      +    } else if age >= 65 {
      +        println!("{} is Important Birthday", age);
      +    } else {
      +        println!("{} is Not an Important Birthday", age);
      +    }
      +
       }

#. Run the code and capture the result:
   
   .. code-block:: console 

      Compiling tut-003_Rand-and-flowctrl v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-003_Rand-and-flowctrl)
            Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.73s
            Running `target\debug\tut-003_Rand-and-flowctrl.exe`
      Random age: 70
      -------------------------------------------------------------------
      70 is Important Birthday
         *  Terminal will be reused by tasks, press any key to close it. 

#. Commit the change and tag

Ternary operator 
==================

1. Let add some more code to explain ternary operator
   
   .. code-block:: diff 

      index 7a887f8..01ea0ac 100644
      --- a/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      +++ b/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      @@ -15,5 +15,21 @@ fn main() {
           } else {
               println!("{} is Not an Important Birthday", age);
           }
      +    println!("-------------------------------------------------------------------");   
      +    
      +    // ternary operator 
      +    let my_age = age;
      +
      +    let can_vote = if my_age >=18 {
      +        true // no semi-colon here as the statement has not ended
      +    } else {
      +        false // no semi-colon
      +    }; // semi-colon here to mark end of statement
      +    
      +    let can_vote_str = if can_vote {String::from("can VOTE!")} else {String::from("cannot VOTE!")};
      +
      +    println!("You are {} years young and {}", my_age, can_vote_str);
      +
      +    println!("-------------------------------------------------------------------");   

       }
   
   * we don't need the semi-colon if it just going to return a value. 

#. Save and Run the code and capture the result.
   
   .. code-block:: console

         Compiling tut-003_Rand-and-flowctrl v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-003_Rand-and-flowctrl)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.83s
           Running `target\debug\tut-003_Rand-and-flowctrl.exe`
      Random age: 50
      -------------------------------------------------------------------
      50 is Important Birthday
      -------------------------------------------------------------------
      You are 50 years young and can VOTE!
      -------------------------------------------------------------------
       *  Terminal will be reused by tasks, press any key to close it. 

#. Commit the change 

match 
=====

match is another useful conditional.

* match is going to run different code depending upon conditions.
* You can use it for error handling and such

1. Let write some code 
   
   .. code-block:: diff 

      --- a/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      +++ b/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      @@ -32,4 +32,14 @@ fn main() {

           println!("-------------------------------------------------------------------");

      +    // match as conditional 
      +    match age {
      +        1..=18 => println!("{} match case 1: Important Birthday", age), // 1 through 18
      +        21 | 50 => println!("{} match case 2: Important Birthday", age), // 21 or 50
      +        65..=i32::MAX => println!("{} match case 3: Important Birthday", age), // > 65
      +        _ => println!("Not an Important Birthday"), // Default
      +    };
      +
      +    println!("-------------------------------------------------------------------");
      +
       }


   .. card:: Code Explanation:
      
      * with ``1..=18`` is says we want range 1 to 18, including 18, so [1, 18]
      * if it age match 21 or 50, so ``21 | 50``
      * we use a comma to separate the difference case, conditionals
      * we use ``_`` to match any anything else. the default behavior if no match 
        based on the conditions is found.

         .. note:: it's important when using match, you are able to cover every 
            possible value for age.

2. Run and capture result 
   
   .. code-block:: console 

       Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.06s
           Running `target\debug\tut-003_Rand-and-flowctrl.exe`
      Random age: 77
      -------------------------------------------------------------------
      77 is Important Birthday
      -------------------------------------------------------------------
      You are 77 years young and can VOTE!
      -------------------------------------------------------------------
      77 match case 3: Important Birthday
      -------------------------------------------------------------------
       *  Terminal will be reused by tasks, press any key to close it. 

#. Commit the change.

match compare 
-------------

1. Add the following code
   
   .. code-block:: diff 

      --- a/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      +++ b/_resources/Examples/tut-003_Rand-and-flowctrl/src/main.rs
      @@ -1,4 +1,6 @@
       use rand::Rng;
      +use std::cmp::Ordering;
      +

       fn main() {
           // generate a random int between 1 and 100 (inclusive)
      @@ -18,7 +20,7 @@ fn main() {
           println!("-------------------------------------------------------------------");

           // ternary operator
      -    let my_age = age;
      +    let mut my_age = age;

           let can_vote = if my_age >=18 {
               true // no semi-colon here as the statement has not ended
      @@ -40,6 +42,19 @@ fn main() {
               _ => println!("Not an Important Birthday"), // Default
           };

      +    println!("-------------------------------------------------------------------\n\n");
      +
      +
      +    // Compares age to valid age and cmp returns an Ordering which
      +    // has either the value Less, Greater, or Equal
      +    my_age = 18;
      +    println!("You are {} years young", my_age);
      +    let voting_age = 18;
      +    match my_age.cmp(&voting_age) {
      +        Ordering::Less => println!("Can't Vote"),
      +        Ordering::Greater => println!("Can Vote"),
      +        Ordering::Equal => println!("You just gained the right to vote!"),
      +    };
           println!("-------------------------------------------------------------------");

       }

2. Run the code and capture result 
   
   .. code-block:: console 

       Compiling tut-003_Rand-and-flowctrl v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-003_Rand-and-flowctrl)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.94s
           Running `target\debug\tut-003_Rand-and-flowctrl.exe`
      Random age: 60
      -------------------------------------------------------------------
      60 is Not an Important Birthday
      -------------------------------------------------------------------
      You are 60 years young and can VOTE!
      -------------------------------------------------------------------
      Not an Important Birthday
      -------------------------------------------------------------------


      You are 18 years young
      You just gained the right to vote!
      -------------------------------------------------------------------
       *  Terminal will be reused by tasks, press any key to close it. 

#. Commit the change