Basic 1st Program in Rust 
###########################

**Objectives**

1. Learn how to create a rust project
#. Learn how to take basic input from a user and output it in the terminal.


Step 1: Create Workspace & Project
************************************

We need to create a folder that will serve as a workspace to keep all the 
code examples.

1. I created mine under the repo _resources/Examples.
   
   * I (transcriber) will use ``ROOT_REPO= ~/Workspace/Repos/Pers/Wiki_RustTutorialDerek``
     as the example for where I am keeping my code and doc locally.
   
   .. code-block:: console
      :caption: from ROOT_REPO= ~/Workspace/Repos/Pers/Wiki_RustTutorialDerek

      mkdir -p _resources/Examples

2. use rust ``cargo`` build system and package manager to create a basic project
   with the following command

   * syntax: ``cargo new <package-name>`` to create an new binary application.
   
   .. warning:: The package name cannot start with a digit

      .. code-block:: console 
         :caption: example of error 
         :emphasize-lines: 1

         _resources/Examples (main)$ cargo new 001_basic-hello
             Creating binary (application) `001_basic-hello` package
         error: invalid character `0` in package name: `001_basic-hello`, the name cannot start with a digit
         If you need a package name to not match the directory name, consider using --name flag.
         If you need a binary with the name "001_basic-hello", use a valid package name, and set the binary name to be different from the package. This can be done by setting the binary filename to `src/bin/001_basic-hello.rs` or change the name in Cargo.toml with:

             [[bin]]
             name = "001_basic-hello"
             path = "src/main.rs"
      
      * You can always type ``cargo new --help`` to see all the options and argument 
        support.
   
   .. code-block:: console
      :emphasize-lines: 1
      :caption: using git bash terminal in Windows.

      $ cargo new tut-001_basic-hello
          Creating binary (application) `tut-001_basic-hello` package
      note: see more `Cargo.toml` keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

   
   
   * The following directories and files are created 
     
     .. code-block:: console 
        
        _resources/Examples(main)$ tree -a .
        .
        └── tut-001_basic-hello
            ├── Cargo.toml
            └── src
                └── main.rs
        
        2 directories, 2 files

#. Open the newly created project in vscode.

Step 2: Explore the basic Project Created by Cargo 
****************************************************

Using git tag ``RS-001.0_v0.0.1``, let's explore what Rust has created. 

.. code-block:: toml 
   :caption: tut-001_basic-hello/Cargo.toml at e9618afe70c

   [package]
   name = "tut-001_basic-hello"
   version = "0.1.0"
   edition = "2024"

   [dependencies]

* Cargo as the package manager use a declarative language called Tom's Obvious 
  Minimal Language (TOML) to manage the dependencies and configure the project.
  
  * ``Cargo.toml`` keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

.. code-block:: rust 
   :caption: tut-001_basic-hello/src/main.rs
   :linenos:

   fn main() {
       println!("Hello, world!");
   }

* by default, Rust create a basic hello world program and use 4-space for 
  indentation. 
* ``main.rs`` is the file we will mostly modify and extend as part of the tutorial.


Rust could also create a ``.gitignore`` file if the code is not already part of 
a .git repository.

.. code-block:: console 

   >cat .gitignore
   /target
   
* it is safe to say all the content under /target should not be committed.

Step 3: Build  & Run The Automatically Created Project 
********************************************************

1. Build the project with ``cargo build`` or ``rustc main.rs``
   
   .. code-block:: console
      :caption: git bash windows terminal 

      Wiki_RustTutorialDerek (main)$ ROOT_REPO=$(pwd) 
      pushd ${ROOT_REPO}/_resources/Examples/tut-001_basic-hello/
   
   .. code-block:: console
      :caption: example output. I remove long path

      $ cargo build
         Compiling tut-001_basic-hello v0.1.0 (Wiki_RustTutorialDerek\_resources\Examples\tut-001_basic-hello)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.33s


2. Explore the result

   .. code-block:: console 
      :linenos:
      :emphasize-lines: 3, 7, 38

      tut-001_basic-hello(main)$ tree -a .
      .
      ├── Cargo.lock
      ├── Cargo.toml
      ├── src
      │   └── main.rs
      └── target
          ├── .rustc_info.json
          ├── CACHEDIR.TAG
          └── debug
              ├── .cargo-lock
              ├── .fingerprint
              │   └── tut-001_basic-hello-db9b899f774f08a2
              │       ├── bin-tut-001_basic-hello
              │       ├── bin-tut-001_basic-hello.json
              │       ├── dep-bin-tut-001_basic-hello
              │       └── invoked.timestamp
              ├── build
              ├── deps
              │   ├── tut_001_basic_hello.d
              │   ├── tut_001_basic_hello.exe
              │   └── tut_001_basic_hello.pdb
              ├── examples
              ├── incremental
              │   └── tut_001_basic_hello-03ia3pnlxift9
              │       ├── s-h6kxflonxh-0tdyhrx-1lrwhkwqbb7zphhpvs7o3a49g
              │       │   ├── 0hn2ehul2864jvy3r7i64mtcr.o
              │       │   ├── 17n286upe9k0ozhw7phkt34ij.o
              │       │   ├── bg12te2oesp9t2bcituylso7g.o
              │       │   ├── btnygjf7a1pph67kdchknplfw.o
              │       │   ├── dep-graph.bin
              │       │   ├── e4hzg2lx5my1empo6spq1i936.o
              │       │   ├── ena1byutaqnb7nz56jf8jv1ja.o
              │       │   ├── query-cache.bin
              │       │   └── work-products.bin
              │       └── s-h6kxflonxh-0tdyhrx.lock
              ├── tut-001_basic-hello.d
              ├── tut-001_basic-hello.exe
              └── tut_001_basic_hello.pdb

      11 directories, 26 files 
   
   * You can see ``Cargo.lock`` file and ``target`` folder has been created.
     
     * ``Cargo.lock``
       
       .. code-block:: console
          :caption: tut-001_basic-hello/Cargo.lock
          
          # This file is automatically @generated by Cargo.
          # It is not intended for manual editing.
          version = 4
          
          [[package]]
          name = "tut-001_basic-hello"
          version = "0.1.0"
       
       * is going to store all the versions for your dependencies. Anytime you 
         would want to change your dependencies version you can type ``cargo update``
          
     * under target/debug there is an executable which we can run manually like 
       ``./target/debug/tut-001_basic-hello.exe`` or via ``cargo run``
   
#. Run the project
   
   .. code-block:: console
      :emphasize-lines: 2

      tut-001_basic-hello (main)
      $ ./target/debug/tut-001_basic-hello.exe 
      Hello, world!
   
   .. code-block:: console
      :emphasize-lines: 2

      tut-001_basic-hello (main)
      $ cargo run
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s
           Running `target\debug\tut-001_basic-hello.exe`
      Hello, world!

#. Commit the change we have so far. Don't forget to not commit target/ folder.

Add Tutorial Project Dependencies 
**********************************

.. note:: throughout this tutorial,
   
   * if you want to get rid of warnings about 
     unused variables then add to the first line of the .rs file, this code 
     ``#![allow(unused)]``

     * This will get rid of warnings for variables that are declared but not are 
       in used.
     
     .. warning:: Generally, you should not do that but this is just a measure the 
        instructor used as part of the tutorial.

1. Open src/main.rs file in your text editor 
#. Start **adding the dependencies** of the project( crates and modules) we will use 
   throughout the entire tutorial. 

   * There are a ton of libraries that we will use so to add them, 
     Derek, the instructor, add all of them in one go. 
     
     * a crate is just a compilation unit. 
       
       .. compound:: `Rust By Example - crates`_ 
          :class: light-gray-bg

          A :term:`crate` is a compilation unit in Rust. Whenever ``rustc some_file.rs`` 
          is called, ``some_file.rs`` is treated as the crate file. If 
          ``some_file.rs`` has ``mod`` declarations in it, then the contents of 
          the module files would be inserted in places where ``mod`` declarations 
          in the crate file are found, before running the compiler over it. 
          
          .. important:: In other words, modules do not get compiled individually, 
             only crates get compiled.

          A :term:`crate` can be compiled into a binary or into a library. 
          By default, ``rustc`` will produce a binary from a crate. This behavior 
          can be overridden by passing the ``--crate-type`` flag to ``lib``.

       
       * to find all the crates , there is "CrateHub" https://crates.io/

   I. add standard library 

      .. code-block:: rust 
         :caption: src/main.c 
         :linenos:
   
         #![allow(unused)]
   
         use std::io;
      
      * Instead of ``std::io``, if you want to bring all public under his library into your 
        specific scope, you can do ``use std::io::*;`` but ``std::io`` will do just 
        fine.
      
   #. add ``use rand::Rng;`` random range - so you can generate random value.
     
      .. code-block:: Rust 
         :console: src/main.rs 
         :lineno-start:  4

         use rand::Rng;

      * if you see an a warning by rust-analyzer when you add this line, it means the dependency is 
        missing. 
        
        .. image:: ./_images/RS-001.0_ExtendApp_1.0_RandWarning.png
           :width: 350px 

        * ``Rand`` is the :term:`crate` and you can visit `crates.io`_ , search for 
          ``Rand`` and find the latest version number.

          .. image:: ./_images/RS-001.0_ExtendApp_1.1_RandCrate.png
             :width: 350px

        A. To get rid of the warning, open ``Cargo.toml`` and under ``[dependencies]``
           add the crate name and version needed by your program. 

           .. code-block:: toml
              :caption: Cargo.toml
              :lineno-start: 6
              
              [dependencies]
              rand = "0.9.1"
   
   #. Another thing you can do with these libraries, you can actually use nested 
      paths if you want to import many of them at once. Add the following to 
      your main.rs 

      .. code-block:: Rust 
         :caption: src/main.rs
         :lineno-start: 5

         use std::io::{Write, BufReader, BufRead, ErrorKind};
         use std::fs::File;
         use std::cmp::Ordering;
      
      * ``std::io::Write`` is going to be used later in the tutorial to be able to 
        work with files.
      
      * ``std::cmp::Ordering`` is going to be used with something called ``match``

#. Once all changes are added, you can run the application to make sure no issues 
   are detected. 

   * With rust-analyzer in vscode, you will see a ``Run`` icon on top of main,
     just click on that to run. It also comes with a basic debugger, you can 
     add break point and run debug to debug your program.
     
     .. image:: ./_images/RS-001.0_ExtendApp_2.0_RunDebug.png
        :width: 450px
     
     .. code-block:: console 
        :caption: terminal output after clicking on run 

        *  Executing task: C:\Users\ricky\.cargo\bin\cargo.EXE run --package tut-001_basic-hello --bin tut-001_basic-hello 

           Compiling cfg-if v1.0.0
           Compiling zerocopy v0.8.24
           Compiling getrandom v0.3.2
           Compiling rand_core v0.9.3
           Compiling ppv-lite86 v0.2.21
           Compiling rand_chacha v0.9.0
           Compiling rand v0.9.1
           Compiling tut-001_basic-hello v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-001_basic-hello)
            Finished `dev` profile [unoptimized + debuginfo] target(s) in 3.33s
             Running `target\debug\tut-001_basic-hello.exe`
        Hello, world!
         *  Terminal will be reused by tasks, press any key to close it. 
   
   .. note:: This code serves as the basic template from which all subsequent tutorial 
      lesson is built upon.

#. Commit the changes so far 

Summary and Code Explanation 
=================================

Some explanation of the code so far:

.. literalinclude:: ./_resources/Examples/tut-001_basic-hello/src/main.rs.bak 
   :language: Rust

* function always start with the keyword ``fn`` followed by 1 or more space, 
  then function name. ``fn main()``. This function takes no parameters. 

  * By default, Rust use 4 white space for indentation.

* the ``println!`` is a macro. Whenever you see a ``!`` next something that may 
  look like a function name is a macro. 

  .. compound:: Rust By Example 
     :class: light-gray-bg

     :term:`Rust Macros` - :term:`Macros` are a way of writing code that writes other code, 
     which is known as metaprogramming.

     * macro name ends with a bang ``!``, 
     * instead of generating a function call, macros are expanded into source 
       code that gets compiled with the rest of the program

* Rust has some keyword (strict keyword) that you may not use for naming variables,
  or functions. You can learn more about `Rust Keyword`_
* the keyword ``use`` is rust's way of allowing user to import a :term:`crate`.
* a :term:`crate` is a compilation unit, similar to c translation unit. A crate 
  can be a library or an application binary.

Extend Hello World App 
*************************

using tag RS-001.0_v0.0.3 as starting point, I will continue documenting the 
lesson.

**objectives**

* Take input from the user and greet user by name.

Code Writing and Explanation
=============================

1. I follow the instructor code but remove the imports that are not necessary 
   for this basic tutorial. I wanted to see if any warnings or error will be 
   thrown. Made the following changes to the source code.

   .. code-block:: Diff 
      :caption: src/main

      --- a/_resources/Examples/tut-001_basic-hello/src/main.rs
      +++ b/_resources/Examples/tut-001_basic-hello/src/main.rs
      @@ -1,12 +1,12 @@
      -#![allow(unused)]
      +// #![allow(unused)]

       use std:: io;
      -use rand::Rng;
      -
      -use std::io::{Write, BufReader, BufRead, ErrorKind};
      -use std::fs::File;
      -use std::cmp::Ordering;

       fn main() {
      -    println!("Hello, world!");
      +    println!("what is your name?");
      +    let mut name = String::new();
      +    let greeting: &str = "Nice to meet you";
      +    io::stdin().read_line(&mut name)
      +        .expect("Didn't Receive User Input");
      +    println!("Hello {}! {}", name.trim_end(), greeting);
       }


.. card:: explanation
   
   * we define a mutable variable (i.e one that can change).
     
     .. important:: by default, all variable you create inside of rust are immutable. 
        
        You can set them up to be mutable by starting them with 
        ``let mut``

        * ``let`` keyword is used for declaration of a variable.
        * ``mut`` tells the compiler the variable is mutable. Without ``mut``,
          the default will apply (immutable.)
        
        The reason why have immutable variable by default is because by using 
        immutable variables, this basically eliminate having to track down how 
        values change throughout your code, which can save you a ton of time 
        when it comes to debugging.
   
      
   * ``String::new()`` is a function that will return an empty string.
   * ``name`` is the mutable variable that will hold the user name.
   * we use ``io::stdin().read_line`` to read the character typed by the user.
     
     * ``&mut name``  say its a mutable parameter and its value is name

     * ``.expect`` is for error checking.

     * **explanation**: basically the read line function is going to receive name 
       and the reference symbol use ``&`` here before ``mut`` say it is a reference 
       to the variable and this is going to allow readline to save value directly
       to the name.

       * ``read_line`` actually return a *Result*. and the result can be an 
         ``enum``, enumerated type which can only be two values are either
         ``Ok`` or ``Err``. All this error handling is already built into 
         rust. And what that allows you to do is say::

            if Err is returned:
               you can go and say the operation has failed. And Err can tell you 
               why the function has failed.
         
         * ``.expect`` is a way for us to print out the message if we the function 
           hit an error.
           
           .. note:: without ``.expect`` and without ``#![allow(unused)]``, 
              
              if I just run the code, then a warning will show. See the testing 
              method section.

   * in the ``println!`` macro we can use ``{}`` to insert different value to print 
     as message string formatting.

     ``name.trim_end()`` - the trim.end() function remove the automatic new line 
     that get inserted at the end ``name`` because the user hit a new line [ENTER]

Testing 
========

1. I deleted everything under ``target`` so I see what a fresh build will look 
   like. 

   ``rm -rf tut-001_basic-hello/target/``

2. Press the ``Run`` icon on top of main. 
   
   I. Type a name. 
   #. Capture the result 
   
   .. code-block:: console 
      :caption: program testing

       *  Executing task: C:\Users\ricky\.cargo\bin\cargo.EXE run --package tut-001_basic-hello --bin tut-001_basic-hello 

         Compiling zerocopy v0.8.24
         Compiling getrandom v0.3.2
         Compiling cfg-if v1.0.0
         Compiling rand_core v0.9.3
         Compiling ppv-lite86 v0.2.21
         Compiling rand_chacha v0.9.0
         Compiling rand v0.9.1
         Compiling tut-001_basic-hello v0.1.0 (Wiki_RustTutorialDerek\_resources\Examples\tut-001_basic-hello)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 3.82s
           Running `target\debug\tut-001_basic-hello.exe`
      what is your name?
      Ricky
      Hello Ricky! Nice to meet you
       *  Terminal will be reused by tasks, press any key to close it. 
      

**Test 2**:

1. Make the following changes to the main.rs 
   
   .. code-block:: diff 

      --- a/_resources/Examples/tut-001_basic-hello/src/main.rs
      +++ b/_resources/Examples/tut-001_basic-hello/src/main.rs
      @@ -7,6 +7,6 @@ fn main() {
           let mut name = String::new();
           let greeting: &str = "Nice to meet you";
           io::stdin().read_line(&mut name)
      -        .expect("Didn't Receive User Input");
      +        /* .expect("Didn't Receive User Input") */;
           println!("Hello {}! {}", name.trim_end(), greeting);
       }


2. Run the code and capture the result 
   
   .. code-block:: console 

        Executing task: C:\Users\ricky\.cargo\bin\cargo.EXE run --package tut-001_basic-hello --bin tut-001_basic-hello 

         Compiling cfg-if v1.0.0
         Compiling zerocopy v0.8.24
         Compiling getrandom v0.3.2
         Compiling rand_core v0.9.3
         Compiling ppv-lite86 v0.2.21
         Compiling rand_chacha v0.9.0
         Compiling rand v0.9.1
         Compiling tut-001_basic-hello v0.1.0 (Wiki_RustTutorialDerek\_resources\Examples\tut-001_basic-hello)
      warning: unused `Result` that must be used
       --> src\main.rs:9:5
        |
      9 |     io::stdin().read_line(&mut name)
        |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        |
        = note: this `Result` may be an `Err` variant, which should be handled
        = note: `#[warn(unused_must_use)]` on by default
      help: use `let _ = ...` to ignore the resulting value
        |
      9 |     let _ = io::stdin().read_line(&mut name)
        |     +++++++

      warning: `tut-001_basic-hello` (bin "tut-001_basic-hello") generated 1 warning
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 3.16s
           Running `target\debug\tut-001_basic-hello.exe`
      what is your name?
      Ricky
      Hello Ricky! Nice to meet you
       *  Terminal will be reused by tasks, press any key to close it. 


.. include:: ./relevant_urls.rst

.. include:: ../../relevant_urls.rst
