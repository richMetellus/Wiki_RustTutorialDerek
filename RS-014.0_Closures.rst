Closures
#########

a closure is a function without a name and they are more likely 
going to be stored in a variable and can be used to pass a function into another 
function. 

The basic layout for creating a closure::

   let var_name = |parameter1, parameter2, ..., parameterN| -> return_type {Body}

where each parameter is in the form ``variable_name: data_type``

Let's create a couple different closures:

* create a close that indicate somebody can vote.

1. Create a new project
2. Type the following code in main. 
   
   .. code-block:: Rust 

      fn main() {
          // ----- CLOSURES -----
          // A closure is a function without a name and they are sometimes
          // stored in a variable (They can be used to pass a function into
          // another function)
          // let var_name = |parameters| -> return_type {BODY}

          // Create a closure that defines if someone can vote
          let can_vote = |age: i32| {
              age >= 18
          };
          println!("Can vote : {}", can_vote(8));
      }


#. Save and run the code
   
   .. code-block:: console 

      $ cargo run
         Compiling tut-014_closures v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-014_closures)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.81s
           Running `target\debug\tut-014_closures.exe`
      Can vote : false

#. Commit and tag the change ``git tag RS-014.0_v0.0.1``

Closures can access variable outside of its body unlike functions whenever it 
is borrowing.

1. Add the following code to the project main
   
   .. code-block:: diff 
      :caption: src/main.rs

      index 8b36a6a..bf26f66 100644
      --- a/_resources/Examples/tut-014_closures/src/main.rs
      +++ b/_resources/Examples/tut-014_closures/src/main.rs
      @@ -10,4 +10,9 @@ fn main() {
               age >= 18
           };
           println!("Can vote : {}", can_vote(8));
      +
      +    // Closures can access variables outside of its body with borrowing
      +    let mut samp1 = 5;
      +    let print_var = || println!("samp1 = {}", samp1);
      +    print_var();
       }

#. Save and run
   
   .. code-block:: console 

      $ cargo run
         Compiling tut-014_closures v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-014_closures)
      warning: variable does not need to be mutable
        --> src\main.rs:15:9
         |
      15 |     let mut samp1 = 5;
         |         ----^^^^^
         |         |
         |         help: remove this `mut`
         |
         = note: `#[warn(unused_mut)]` on by default

      warning: `tut-014_closures` (bin "tut-014_closures") generated 1 warning (run `cargo fix --bin "tut-014_closures"` to apply 1 suggestion)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.76s
           Running `target\debug\tut-014_closures.exe`
      Can vote : false
      samp1 = 5

#. Commit the change.

Next exercise will show how you can change values using closures.

1. Make the following modification to the code. 
   
   .. code-block:: diff 
      
      --- a/_resources/Examples/tut-014_closures/src/main.rs
      +++ b/_resources/Examples/tut-014_closures/src/main.rs
      @@ -15,4 +15,15 @@ fn main() {
           let mut samp1 = 5;
           let print_var = || println!("samp1 = {}", samp1);
           print_var();
      +
      +    // change the value
      +    samp1 = 10;
      +    println!("samp1 initial value= {}", samp1);
      +
      +    // You can change values if you mark the closure mutable
      +    let mut change_var = || samp1 += 1;
      +    change_var();
      +    println!("samp1 after change inside closure = {}", samp1);
      +    samp1 = 10;
      +    println!("samp1 after setting it back to original value = {}", samp1);
       }

#. Run the code 
   
   .. code-block:: console 

      $ cargo run
         Compiling tut-014_closures v0.1.0 (C:\Users\ricky\Workspace-loc\Repos\Pers\docs_allTest\source\topics\Prog\Lang\Wiki_Rust-lang\Courses\Wiki_RustTutorialDerek\_resources\Examples\tut-014_closures)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.86s
           Running `target\debug\tut-014_closures.exe`
      Can vote : false
      samp1 = 5
      samp1 initial value= 10
      samp1 after change inside closure = 11
      samp1 after setting it back to original value = 10

#. Save and tag