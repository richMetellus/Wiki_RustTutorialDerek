Arrays, Loops, and Tuples in Rust
####################################

Arrays
********

An Array

* contains multiple different values 
  
  * the elements in the array must be of the same type

* have a **fixed** size.
  
  * elements in the array must have fixed size too.

1. create a new project 
   
   .. code-block:: console 

      $ cargo new tut-004_arrays-loops-tuples
          Creating binary (application) `tut-004_arrays-loops-tuples` package
      note: see more `Cargo.toml` keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

2. Commit the change to mark the beginning project creation as the starting point 
#. Make the following changes to the basic hello world program that was created.
   
   .. code-block:: diff
      :caption: src/main.rs

      --- a/_resources/Examples/tut-004_arrays-loops-tuples/src/main.rs
      +++ b/_resources/Examples/tut-004_arrays-loops-tuples/src/main.rs
      @@ -1,3 +1,24 @@
      +use std::mem; 
      +
       fn main() {
      -    println!("Hello, world!");
      +    
      +    // ----- ARRAYS -----
      +    // Elements in an array must be of the same type
      +    // and have a fixed size
      +    const ARR_1: [i32; 4] = [1,2,3,4];
      +    let arr1_ref: &[i32] = &ARR_1;
      +    // Get value by index starting at 0
      +    println!("1st : {}", ARR_1[0]);
      +    println!("2nd element : {}", ARR_1[1]);
      +
      +    // Get array length
      +    println!("Length : {}", ARR_1.len());
      +    
      +    // Get the size (bytes) of the array.. arrays are continuous block of memory
      +    println!("total size of memory occupied by 1 i32 : {} bytes", mem::size_of::<i32>());
      +    println!("total size of memory occupied by ARR_1 : {} bytes", mem::size_of_val(&ARR_1));
      +    println!("total size of memory occupied by ARR_1 using arr1_ref: {} bytes", mem::size_of_val(arr1_ref));
      +    println!("-------------------------------------------------------------------");
      +
      +
       }

   
   .. card:: code Explanation

      * we import the ``std::mem`` so we can use the ``size_of`` and ``size_of_value``
      * the array syntax is : ``let`` ``var_name`` ``:`` ``[<type>, <size>]`` ``=``
        ``[element1, element2, ...]`` ``;``
        
        * ``[<type>, <size>]`` is optional as the compiler can infer the type unless 
          it's a constant type.
      
      * array use indices to access the elements, index start at 0.

#. Run and capture the result 
   
   .. code-block:: console 

      tut-004_arrays-loops-tuples (main)
      $ cargo run
         Compiling tut-004_arrays-loops-tuples v0.1.0 (Examples\tut-004_arrays-loops-tuples)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.61s
           Running `target\debug\tut-004_arrays-loops-tuples.exe`
           1st : 1
           2nd element : 2
           Length : 4
           total size of memory occupied by 1 i32 : 4 bytes
           total size of memory occupied by ARR_1 : 16 bytes
           total size of memory occupied by ARR_1 using arr1_ref: 16 bytes
           -------------------------------------------------------------------

#. Commit the changes so far to create a new snapshot/starting point.
   
   .. code-block:: console

      commit b83c81c6a188a1eb6bfa0394a378d617ec365710 
      (HEAD -> main, tag: RS-004.0_v0.0.1)

.. seealso:: * `Arrays and Slices (Rust By Example book)`_

Looping 
********

Let's look how to loop through an array.

``loop`` Keyword: infinite Loop
================================

``loop`` keyword 

* can be used to indicate infinite loop ((tbr.)like arduino)

.. _exercise1:
.. card:: Exercise 1: 
   Let's write a simple program that will loop through an array and that will 
   only print the odd value and skip if encounter the value 9.

1. Using the same project let's add the following change.
   
   .. code-block:: diff 

      index 917efe8..c2b8019 100644
      --- a/_resources/Examples/tut-004_arrays-loops-tuples/src/main.rs
      +++ b/_resources/Examples/tut-004_arrays-loops-tuples/src/main.rs
      @@ -20,5 +20,23 @@ fn main() {
           println!("total size of memory occupied by ARR_1 using arr1_ref: {} bytes", mem::size_of_val(arr1_ref));
           println!("-------------------------------------------------------------------");

      +     // ----- LOOP -----
      +    // Create an infinite loop that ends when break is called
      +    let arr_2 = [1,2,3,4,5,6,7,8,9];
      +    let mut loop_idx = 0;
      +    loop {
      +        // check if number is even
      +        if arr_2[loop_idx] % 2 == 0 {
      +            loop_idx += 1;
      +            continue; // Goes to next iteration of loop i.e skip
      +        }
      +
      +        if arr_2[loop_idx] == 9 {
      +            break; // Breaks out of loop
      +        }
      +
      +        println!("Val : {}", arr_2[loop_idx]);
      +        loop_idx += 1;
      +    }


#. Run and capture 
   
   .. code-block:: console
      :linenos:

      $ cargo run
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.02s
           Running `target\debug\tut-004_arrays-loops-tuples.exe`
      1st : 1
      2nd element : 2
      Length : 4
      total size of memory occupied by 1 i32 : 4 bytes
      total size of memory occupied by ARR_1 : 16 bytes
      total size of memory occupied by ARR_1 using arr1_ref: 16 bytes
      -------------------------------------------------------------------
      Val : 1
      Val : 3
      Val : 5
      Val : 7
   
   .. note:: see the number 9, although is odd is not printed. ``break`` skip 
      the rest of the loop body, since there is no more statement to be executed
      the program exit.

#. Commit the change and tag 
   
   .. code-block:: console 

      commit 3aad1fb68ce5ca6aef9ea0b58ac5c894ab0d95e6 
      (HEAD -> main, tag: RS-004.0_v0.0.2)

While loop 
===========

``while`` loop

* is a type of loop based on condition.

1. Let's do some exercise that will print everything in the array with a while loop by 
   adding the following change 

   .. code-block:: diff

      +    
      +    println!("------------------------------- while loop-------------------------");
      +
      +    // ----- WHILE LOOP -----
      +    // Looping based on a condition
      +    loop_idx = 0; // reset our index
      +    while loop_idx < arr_2.len(){
      +        println!("Arr[{}] : {}", loop_idx, arr_2[loop_idx]);
      +        loop_idx += 1;
      +    }

       }

#. Run  
   
   .. code-block:: console 

      $ cargo run
         Compiling tut-004_arrays-loops-tuples v0.1.0 (Examples\tut-004_arrays-loops-tuples)
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.35s
           Running `target\debug\tut-004_arrays-loops-tuples.exe`
      1st : 1
      2nd element : 2
      Length : 4
      total size of memory occupied by 1 i32 : 4 bytes
      total size of memory occupied by ARR_1 : 16 bytes
      total size of memory occupied by ARR_1 using arr1_ref: 16 bytes
      -------------------------------------------------------------------
      Val : 1
      Val : 3
      Val : 5
      Val : 7
      ------------------------------- while loop-------------------------
      Arr[0] : 1
      Arr[1] : 2
      Arr[2] : 3
      Arr[3] : 4
      Arr[4] : 5
      Arr[5] : 6
      Arr[6] : 7
      Arr[7] : 8
      Arr[8] : 9


#. Commit the change and tag
   
   .. code-block:: console 

      commit 2af87eb52b554aefcd55b16106306bbddb9cafd9 
      (HEAD -> main, tag: RS-004.0_v0.0.3)

For Loop 
==========

Let use a ``for`` loop to iterate through all the elements in the array 

1. Add the following changes to the project 
   
   .. code-block:: diff 
      
      +    println!("------------------------------- for loop----------------------------");
      +
      +    // ``for`` loops works better for cycling through collections
      +    for val in arr_2.iter() {
      +        println!("Val : {}", val);
      +    }
      +
       }

#. Run
   
   .. code-block:: console 

      $ cargo run
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.03s
           Running `target\debug\tut-004_arrays-loops-tuples.exe`
      1st : 1
      2nd element : 2
      Length : 4
      total size of memory occupied by 1 i32 : 4 bytes
      total size of memory occupied by ARR_1 : 16 bytes
      total size of memory occupied by ARR_1 using arr1_ref: 16 bytes
      -------------------------------------------------------------------
      Val : 1
      Val : 3
      Val : 5
      Val : 7
      ------------------------------- while loop-------------------------
      Arr[0] : 1
      Arr[1] : 2
      Arr[2] : 3
      Arr[3] : 4
      Arr[4] : 5
      Arr[5] : 6
      Arr[6] : 7
      Arr[7] : 8
      Arr[8] : 9
      ------------------------------- for loop----------------------------
      Val : 1
      Val : 2
      Val : 3
      Val : 4
      Val : 5
      Val : 6
      Val : 7
      Val : 8
      Val : 9

#. Commit the change and tag 

   .. code-block:: console 

      commit f9e32b695bf0208698960e2e0dbdb8b1c72c848f 
      (HEAD -> main, tag: RS-004.0_v0.0.4)

Dynamic Size Array and Rust 
***************************

.. note:: (tbr.) If I want to use dynamically sized arrays, then checkout 
   the following links:

   It seems in rust arrays always have a **fixed** size. The size must be known 
   at compile time. 

   * allowing user to pass the size of the arrays at run-time from a terminal 
     can be unsafe in C.
   
   .. seealso:: * `Array Size Pass by Macro (forum)`_
      
      * `Dynamic size array and rust (reddit)`_
      * `Arrays and Slices (Rust By Example book)`_

Tuples
*******

References and Further Reading 
********************************

* `Arrays and Slices (Rust By Example book)`_ 

.. include:: ./relevant_urls.rst 
.. include:: ../../relevant_urls.rst