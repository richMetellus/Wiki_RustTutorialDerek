Iterators 
############

Iterators has been briefly mentioned before in other exercise.

An iterator can help us cycle through values in arrays,
vectors, or maps.

Let's start the exercise.

1. Create a new project ``cargo new tut-013_iterators``
2. Add the following code:
   
   .. code-block:: Rust 
      :caption: main.rs

      fn main() {
          let arr_it = [1, 2, 3, 4];

          // cycle through the array.
          // An iterator cycles through values by borrowing, so the collection
          // is not moved (You can't change values). Ownership is not moved.
          print!("Iterate through all the value in the array \n[");
          for val in arr_it.iter(){
              print!("{},", val);
          }
          println!("]");

          // you can also do ``arr_it.into_iter()``, in this situation, you'll consume
          // the collection but you'll no longer able to use the collection.

          println!("You can also create an iterator");
          let mut iter1 = arr_it.iter();
          println!("And call for each value with next");
          println!("1st : {:?}", iter1.next());
      }

#. Save and run the code 
   
   .. code-block:: console 

      $ cargo run
          Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.03s
           Running `target\debug\tut-013_iterators.exe`
      Iterate through all the value in the array 
      [1,2,3,4,]
      You can also create an iterator
      And call for each value with next
      1st : Some(1)

#. Commit and tag the change ``RS-013.0_v0.0.1``

Next, let's move on to ``Closures``.